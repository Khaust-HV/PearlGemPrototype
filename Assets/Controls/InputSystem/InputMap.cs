//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.12.0
//     from Assets/Controls/InputSystem/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Controls/InputSystem/InputMap.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputMap: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""GameplayInput"",
            ""id"": ""21b72a09-2620-4545-9116-dbb5dfc504b6"",
            ""actions"": [
                {
                    ""name"": ""FirstTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""1416dce7-cff0-4f25-a538-b1da1a6a8f91"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SingleSwipeOnScreen"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fff6f07e-7de6-4646-acef-46ac07995e62"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FirstTouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8f2c62e9-72ab-4683-b49a-111d25803af7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3f10dff-af87-4821-ab17-c99045fb2128"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SingleSwipeOnScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9aab9d71-280a-49eb-913f-947a87d64de4"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62d6f43d-8eb4-48ac-9241-0ce35523c178"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayInput
        m_GameplayInput = asset.FindActionMap("GameplayInput", throwIfNotFound: true);
        m_GameplayInput_FirstTouchContact = m_GameplayInput.FindAction("FirstTouchContact", throwIfNotFound: true);
        m_GameplayInput_SingleSwipeOnScreen = m_GameplayInput.FindAction("SingleSwipeOnScreen", throwIfNotFound: true);
        m_GameplayInput_FirstTouchPosition = m_GameplayInput.FindAction("FirstTouchPosition", throwIfNotFound: true);
    }

    ~@InputMap()
    {
        UnityEngine.Debug.Assert(!m_GameplayInput.enabled, "This will cause a leak and performance issues, InputMap.GameplayInput.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayInput
    private readonly InputActionMap m_GameplayInput;
    private List<IGameplayInputActions> m_GameplayInputActionsCallbackInterfaces = new List<IGameplayInputActions>();
    private readonly InputAction m_GameplayInput_FirstTouchContact;
    private readonly InputAction m_GameplayInput_SingleSwipeOnScreen;
    private readonly InputAction m_GameplayInput_FirstTouchPosition;
    /// <summary>
    /// Provides access to input actions defined in input action map "GameplayInput".
    /// </summary>
    public struct GameplayInputActions
    {
        private @InputMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public GameplayInputActions(@InputMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "GameplayInput/FirstTouchContact".
        /// </summary>
        public InputAction @FirstTouchContact => m_Wrapper.m_GameplayInput_FirstTouchContact;
        /// <summary>
        /// Provides access to the underlying input action "GameplayInput/SingleSwipeOnScreen".
        /// </summary>
        public InputAction @SingleSwipeOnScreen => m_Wrapper.m_GameplayInput_SingleSwipeOnScreen;
        /// <summary>
        /// Provides access to the underlying input action "GameplayInput/FirstTouchPosition".
        /// </summary>
        public InputAction @FirstTouchPosition => m_Wrapper.m_GameplayInput_FirstTouchPosition;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_GameplayInput; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="GameplayInputActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(GameplayInputActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="GameplayInputActions" />
        public void AddCallbacks(IGameplayInputActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Add(instance);
            @FirstTouchContact.started += instance.OnFirstTouchContact;
            @FirstTouchContact.performed += instance.OnFirstTouchContact;
            @FirstTouchContact.canceled += instance.OnFirstTouchContact;
            @SingleSwipeOnScreen.started += instance.OnSingleSwipeOnScreen;
            @SingleSwipeOnScreen.performed += instance.OnSingleSwipeOnScreen;
            @SingleSwipeOnScreen.canceled += instance.OnSingleSwipeOnScreen;
            @FirstTouchPosition.started += instance.OnFirstTouchPosition;
            @FirstTouchPosition.performed += instance.OnFirstTouchPosition;
            @FirstTouchPosition.canceled += instance.OnFirstTouchPosition;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="GameplayInputActions" />
        private void UnregisterCallbacks(IGameplayInputActions instance)
        {
            @FirstTouchContact.started -= instance.OnFirstTouchContact;
            @FirstTouchContact.performed -= instance.OnFirstTouchContact;
            @FirstTouchContact.canceled -= instance.OnFirstTouchContact;
            @SingleSwipeOnScreen.started -= instance.OnSingleSwipeOnScreen;
            @SingleSwipeOnScreen.performed -= instance.OnSingleSwipeOnScreen;
            @SingleSwipeOnScreen.canceled -= instance.OnSingleSwipeOnScreen;
            @FirstTouchPosition.started -= instance.OnFirstTouchPosition;
            @FirstTouchPosition.performed -= instance.OnFirstTouchPosition;
            @FirstTouchPosition.canceled -= instance.OnFirstTouchPosition;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="GameplayInputActions.UnregisterCallbacks(IGameplayInputActions)" />.
        /// </summary>
        /// <seealso cref="GameplayInputActions.UnregisterCallbacks(IGameplayInputActions)" />
        public void RemoveCallbacks(IGameplayInputActions instance)
        {
            if (m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="GameplayInputActions.AddCallbacks(IGameplayInputActions)" />
        /// <seealso cref="GameplayInputActions.RemoveCallbacks(IGameplayInputActions)" />
        /// <seealso cref="GameplayInputActions.UnregisterCallbacks(IGameplayInputActions)" />
        public void SetCallbacks(IGameplayInputActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="GameplayInputActions" /> instance referencing this action map.
    /// </summary>
    public GameplayInputActions @GameplayInput => new GameplayInputActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "GameplayInput" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="GameplayInputActions.AddCallbacks(IGameplayInputActions)" />
    /// <seealso cref="GameplayInputActions.RemoveCallbacks(IGameplayInputActions)" />
    public interface IGameplayInputActions
    {
        /// <summary>
        /// Method invoked when associated input action "FirstTouchContact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFirstTouchContact(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SingleSwipeOnScreen" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSingleSwipeOnScreen(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "FirstTouchPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFirstTouchPosition(InputAction.CallbackContext context);
    }
}
